
// server.pde = CCE
//
// Simple example of how to use VirtualWire to send and receive messages
// with a DR3100 module.
// Wait for a message from another arduino running the 'client' example,
// and send a reply.
// You can use this as the basis of a remote control/remote sensing system
//
// See VirtualWire.h for detailed API docs
// Author: Mike McCauley (mikem@airspayce.com)
// Copyright (C) 2008 Mike McCauley
// $Id: server.pde,v 1.1 2008/04/20 09:24:17 mikem Exp $

#include "VirtualWireWithoutPTT.h"

int TRANSMIT_PIN = 12;
int RECEIVE_PIN =13;
int CCE_speed;
byte current_status = 1;                            //variable die zegt of we sturen of niet
byte send_status = 0;


// RF adresses:
int CCE_ADRESS = 0;
int COMM_ADRESS = 1;

void setup()
{
    Serial.begin(9600);	// Debugging only
    Serial.println("setup");
    
    vw_set_tx_pin(TRANSMIT_PIN);                                                               // set virtual wire for RF communication
    vw_set_rx_pin(RECEIVE_PIN);

    // Initialise the IO and ISR
    vw_setup(2000);	 // Bits per sec
    vw_rx_start();       // Start the receiver PLL running
}
//te zenden bericht (ontvanger=1, snelheid, status)
void loop()
{ 
    
    uint8_t buf[VW_MAX_MESSAGE_LEN];
    uint8_t buflen = VW_MAX_MESSAGE_LEN;
    
    

    // Wait for a message
if (vw_have_message()){
  if (vw_get_message(buf, &buflen)) // Non-blocking
    {
      if (buf[0] == COMM_ADRESS){
        
           int i;

  // Message with a good checksum received, dump it.
  Serial.print("Got: ");
  
  for (i = 0; i < buflen; i++)
  {
      Serial.print(buf[i], HEX);
      Serial.print(" ");
  }
  Serial.println("");
   uint8_t msg[] = {COMM_ADRESS, CCE_speed, current_status};
        if (send_status==1){
    vw_send(msg, 3);
          Serial.println("send");
          if (current_status==0);{
          send_status=0;
          }
          }
      }
    }
}
uint8_t buf1[4];
uint8_t buflen1 = 4;

if (Serial.available() > 0) {
    send_status = 1;
    Serial.println("sending");
    Serial.readBytes(buf1,buflen1);
    CCE_speed=(buf1[0]-48)*100+(buf1[1]-48)*10+buf1[2]-48;   
    Serial.println(CCE_speed);
    current_status=(buf1[3]-48);
    Serial.println(current_status);
  }
	// Send a reply

        }
        
